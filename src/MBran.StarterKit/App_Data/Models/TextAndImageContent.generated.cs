//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.10.102
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 1099 with alias "textAndImageContent"
	/// <summary>{Text and Image Content}</summary>
	public partial interface ITextAndImageContent : IPublishedContent
	{
		/// <summary>Content</summary>
		string Content { get; }

		/// <summary>Image</summary>
		IPublishedContent Image { get; }

		/// <summary>Link</summary>
		RJP.MultiUrlPicker.Models.Link Link { get; }

		/// <summary>Summary</summary>
		string Summary { get; }

		/// <summary>Title</summary>
		string Title { get; }
	}

	/// <summary>{Text and Image Content}</summary>
	[PublishedContentModel("textAndImageContent")]
	public partial class TextAndImageContent : PublishedContentModel, ITextAndImageContent
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "textAndImageContent";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public TextAndImageContent(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<TextAndImageContent, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public string Content
		{
			get { return GetContent(this); }
		}

		/// <summary>Static getter for Content</summary>
		public static string GetContent(ITextAndImageContent that) { return that.GetPropertyValue<string>("content"); }

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return GetImage(this); }
		}

		/// <summary>Static getter for Image</summary>
		public static IPublishedContent GetImage(ITextAndImageContent that) { return that.GetPropertyValue<IPublishedContent>("image"); }

		///<summary>
		/// Link
		///</summary>
		[ImplementPropertyType("link")]
		public RJP.MultiUrlPicker.Models.Link Link
		{
			get { return GetLink(this); }
		}

		/// <summary>Static getter for Link</summary>
		public static RJP.MultiUrlPicker.Models.Link GetLink(ITextAndImageContent that) { return that.GetPropertyValue<RJP.MultiUrlPicker.Models.Link>("link"); }

		///<summary>
		/// Summary
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return GetSummary(this); }
		}

		/// <summary>Static getter for Summary</summary>
		public static string GetSummary(ITextAndImageContent that) { return that.GetPropertyValue<string>("summary"); }

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return GetTitle(this); }
		}

		/// <summary>Static getter for Title</summary>
		public static string GetTitle(ITextAndImageContent that) { return that.GetPropertyValue<string>("title"); }
	}
}
